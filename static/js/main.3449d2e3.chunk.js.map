{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","timer","setTimer","time","setTime","isStart","setStart","isComplete","setCompletion","toggle","reset","useEffect","interval","setInterval","clearInterval","className","data-testid","type","value","onChange","e","target","placeholder","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAyGeA,MAtGf,WAAgB,IAAD,EAEaC,mBAAS,GAFtB,mBAENC,EAFM,KAECC,EAFD,OAGWF,mBAAS,GAHpB,mBAGNG,EAHM,KAGAC,EAHA,OAIeJ,oBAAS,GAJxB,mBAINK,EAJM,KAIGC,EAJH,OAKuBN,oBAAS,GALhC,mBAKNO,EALM,KAKMC,EALN,KAqCb,SAASC,IACM,IAATN,GAAcE,EAChBK,IAEAJ,GAAUD,GAOd,SAASK,IACPR,EAAS,GACTI,GAAS,GACTF,EAAQ,GACRI,GAAc,GA8BhB,OA3EAG,qBAAU,WACR,IAAIC,EAAS,KAWb,OAVIP,IACFO,EAAWC,aAAY,WAClBV,EAAO,EACRC,GAAQ,SAAAD,GAAI,OAAIA,EAAK,KAErBW,cAAcF,KAEf,MAGE,kBAAME,cAAcF,MAC1B,CAACP,EAASF,IA+DX,sBAAKY,UAAU,MAAf,UACE,sBAAKA,UAAU,QAAQC,cAAY,QAAnC,UACGb,EACD,mBAAGY,UAAU,OAAb,oBAEF,uBAAOE,KAAK,SAASC,MAAOjB,EAAOkB,SAAU,SAACC,GAAD,OAfhC,SAACA,GAChBlB,EAASkB,EAAEC,OAAOH,OACbX,GACHG,IAYoDS,CAASC,IAAIL,UAAU,QAAQO,YAAY,gBAC/F,qBAAKP,UAAU,OAAf,SACGR,EAAa,wBAAQgB,QAjE5B,WACMtB,EAAQ,IACVG,EAAQH,GACRO,GAAc,GACdC,MA6DwCM,UAAU,YAAlC,mBACd,qCACE,wBAAQQ,QAASd,EAAQM,UAAU,aAAnC,SAhCO,IAATZ,EACK,aACEE,EACF,OAEA,WA4BH,wBAAQkB,QAASb,EAAOK,UAAU,MAAlC,4BCpFKS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.3449d2e3.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.scss';\n\nfunction App() {\n\n  const [timer, setTimer] = useState(0);\n  const [time, setTime] = useState(0);\n  const [isStart, setStart] = useState(false);\n  const [isComplete, setCompletion] = useState(true);\n\n  useEffect(() => {\n    let interval=null;\n    if (isStart) {\n      interval = setInterval(() => {\n        if(time > 0) {\n          setTime(time => time-1)\n        } else {\n          clearInterval(interval)\n        }\n      }, 1000)\n    }\n\n    return () => clearInterval(interval)\n  }, [isStart, time])\n\n  /**\n   * Start timer\n   */\n  function start() {\n    if (timer > 0) {\n      setTime(timer);\n      setCompletion(false);\n      toggle();\n    }\n   \n  }\n\n  /**\n   * Play and pause timer \n   */\n  function toggle() {\n    if (time === 0 && isStart) {\n      reset();\n    } else {\n      setStart(!isStart);\n    }\n  }\n\n  /**\n   * Resets timer\n   */\n  function reset() {\n    setTimer(0);\n    setStart(false);\n    setTime(0);\n    setCompletion(true);\n  }\n\n  /**\n   * Calculates button text on the basis of timer condition\n   * @returns button text\n   */\n  function getButtonText() {\n    if (time === 0) {\n      return 'Play Again';\n    } else if (isStart) {\n      return 'Stop';\n    } else {\n      return 'Resume'\n    }\n  }\n\n  /**\n   * Set timer on input change and resets the game if the game is not yet finished\n   * @param {*} e event\n   */\n  const onChange = (e) => {\n    setTimer(e.target.value);\n    if (!isComplete) {\n      reset();\n    }\n  }\n\n  // TODO: Add countdown timer with SVG Circle\n\n  return (\n    <div className=\"App\">\n      <div className=\"timer\" data-testid=\"timer\">\n        {time}\n        <p className=\"unit\">sec</p>\n      </div>\n      <input type=\"number\" value={timer} onChange={(e) => onChange(e)} className=\"input\" placeholder=\"Enter timer\"/>\n      <div className=\"btns\">\n        {isComplete ? <button onClick={start} className='btn start'>Start</button> : \n        <>\n          <button onClick={toggle} className='btn resume'>{getButtonText()}</button>\n          <button onClick={reset} className='btn'>Reset</button>\n        </> }\n        \n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}